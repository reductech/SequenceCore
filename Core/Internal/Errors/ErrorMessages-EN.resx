<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssertionFailed" xml:space="preserve">
    <value>Assertion Failed '{0}'</value>
  </data>
  <data name="AutomaticVariableNotSet" xml:space="preserve">
    <value>The automatic variable was not set.</value>
  </data>
  <data name="CannotCombineSchemaProperties" xml:space="preserve">
    <value>Schema Property '{0}' cannot have {1} value '{2}' and '{3}'</value>
  </data>
  <data name="CannotConvertNestedEntity" xml:space="preserve">
    <value>Cannot convert a nested entity to {0}.</value>
  </data>
  <data name="CannotConvertNestedList" xml:space="preserve">
    <value>Cannot convert nested list to {0}.</value>
  </data>
  <data name="CannotCreateGeneric" xml:space="preserve">
    <value>Could not create an instance of {0}&lt;{1}&gt;</value>
  </data>
  <data name="CannotCreateScopedContext" xml:space="preserve">
    <value>{0} cannot create a scoped context</value>
  </data>
  <data name="CannotInferType" xml:space="preserve">
    <value>Could not infer type - {0}</value>
  </data>
  <data name="ConflictingParameters" xml:space="preserve">
    <value>Parameters {0} and {1} are in conflict.</value>
  </data>
  <data name="CouldNotConvertEntityValue" xml:space="preserve">
    <value>Could not convert entity value to {0}.</value>
  </data>
  <data name="CouldNotParse" xml:space="preserve">
    <value>Could not parse '{0}' as {1}</value>
  </data>
  <data name="CouldNotResolveVariable" xml:space="preserve">
    <value>Could not resolve variable '{0}'</value>
  </data>
  <data name="CSVError" xml:space="preserve">
    <value>Error Reading CSV</value>
  </data>
  <data name="DirectoryNotFound" xml:space="preserve">
    <value>Directory does not exist or could not be found: '{0}'</value>
  </data>
  <data name="DivideByZero" xml:space="preserve">
    <value>Attempt to Divide by Zero.</value>
  </data>
  <data name="DuplicateParameter" xml:space="preserve">
    <value>Duplicate Parameter: {0}.</value>
  </data>
  <data name="EmptySequence" xml:space="preserve">
    <value>SCL is empty.</value>
  </data>
  <data name="ExternalProcessError" xml:space="preserve">
    <value>External Process Failed: '{0}'</value>
  </data>
  <data name="ExternalProcessMissingOutput" xml:space="preserve">
    <value>External process {0} did not return an output of the expected form</value>
  </data>
  <data name="ExternalProcessNotFound" xml:space="preserve">
    <value>Could not find process '{0}'</value>
  </data>
  <data name="IndexOutOfBounds" xml:space="preserve">
    <value>Index was outside the bounds of the array.</value>
  </data>
  <data name="InvalidCast" xml:space="preserve">
    <value>'{0}' cannot take the value '{1}'</value>
  </data>
  <data name="MissingContext" xml:space="preserve">
    <value>Could not get context '{0}'</value>
  </data>
  <data name="MissingParameter" xml:space="preserve">
    <value>{0} was missing or empty.</value>
  </data>
  <data name="MissingStepSettings" xml:space="preserve">
    <value>Could not get settings: {0}</value>
  </data>
  <data name="MissingStepSettingsValue" xml:space="preserve">
    <value>Could not get settings value: {0}.{1}</value>
  </data>
  <data name="MissingVariable" xml:space="preserve">
    <value>Variable '{0}' does not exist.</value>
  </data>
  <data name="RequirementNotMet" xml:space="preserve">
    <value>Requirement '{0}' not met.</value>
  </data>
  <data name="SchemaInvalidMissingEnum" xml:space="preserve">
    <value>Schema Invalid: No Enum name defined</value>
  </data>
  <data name="SchemaInvalidNoEnumValues" xml:space="preserve">
    <value>SchemaInvalid: No Enum values defined</value>
  </data>
  <data name="SchemaViolationMissingProperty" xml:space="preserve">
    <value>Missing Property: '{0}' in {1}</value>
  </data>
  <data name="SchemaViolationUnexpectedList" xml:space="preserve">
    <value>Did not expect a list for '{0}' in {1}</value>
  </data>
  <data name="SchemaViolationUnexpectedNull" xml:space="preserve">
    <value>Expected '{0}' to not be null in {1}</value>
  </data>
  <data name="SchemaViolationUnexpectedProperty" xml:space="preserve">
    <value>Unexpected Property: '{0}' in {1}</value>
  </data>
  <data name="SchemaViolationUnmatchedRegex" xml:space="preserve">
    <value>'{0}' does not match regex '{1}' in {2}</value>
  </data>
  <data name="SchemaViolationWrongType" xml:space="preserve">
    <value>'{0}' is not a {1} in {2}</value>
  </data>
  <data name="SCLSyntaxError" xml:space="preserve">
    <value>Syntax Error: {0}</value>
  </data>
  <data name="SingleCharacterExpected" xml:space="preserve">
    <value>{0} should be a single character, but was '{1}'.</value>
  </data>
  <data name="StepDoesNotExist" xml:space="preserve">
    <value>The step '{0}' does not exist</value>
  </data>
  <data name="Test" xml:space="preserve">
    <value>Test Error Message: '{0}'</value>
  </data>
  <data name="TypeNotComparable" xml:space="preserve">
    <value>Type {0} is not comparable and so cannot be used for sorting.</value>
  </data>
  <data name="UnexpectedEnumType" xml:space="preserve">
    <value>Enum '{0}' does not exist</value>
  </data>
  <data name="UnexpectedEnumValue" xml:space="preserve">
    <value>Unexpected {0}: {1}</value>
  </data>
  <data name="UnexpectedParameter" xml:space="preserve">
    <value>Unexpected Parameter '{0}' in '{1}'</value>
  </data>
  <data name="UnitExpected" xml:space="preserve">
    <value>An SCL Sequence should have a final return type of Unit. Try wrapping your sequence with 'Print'.</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>Unknown Error: '{0}'</value>
  </data>
  <data name="WrongType" xml:space="preserve">
    <value>{0} expected {1} for parameter {2} but {3} has type {4}</value>
  </data>
  <data name="WrongVariableType" xml:space="preserve">
    <value>Variable '{0}' does not have type '{1}'.</value>
  </data>
</root>